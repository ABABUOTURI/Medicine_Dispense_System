<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Doctor's Dashboard</title>
    <style>
        .floating-header {
            position: fixed;
            top: 15px;
            left: 50%;
            transform: translateX(-50%);
            width: 95%;
            background-color: #D3D3D3;
            color: #D3D3D3;
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .floating-header h1 {
            margin: 0;
            color: #008080;
        }

        .sidebar {
            width: 200px;
            background-color: #008080;
            position: fixed;
            top: 120px;
            bottom: 0;
            left: 20px;
            border-radius: 20px;
            padding: 20px;
            color: #fff;
            height: 50%;
            overflow-y: auto;
        }

        .sidebar ul {
            list-style: none;
            padding: 0;
        }

        .sidebar ul li {
            margin: 20px 0;
        }

        .sidebar ul li a {
            color: #fff;
            text-decoration: none;
            font-size: 18px;
            display: block;
        }

        .sidebar ul li a:hover {
            text-decoration: underline;
        }

        .dashboard-container {
            margin-left: 270px;
            padding: 40px;
            width: 70%;
            margin-top: 10%;
            background-color: #D3D3D3;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .dashboard-container h1 {
            color: #008080;
            margin-bottom: 20px;
        }

        .search-bar {
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
        }

        .search-bar input[type="text"] {
            width: 80%;
            padding: 10px;
            border-radius: 4px;
            border: 1px solid #ccc;
        }

        .search-bar button {
            padding: 10px 20px;
            background-color: #008080;
            color: #fff;
            border: none;
            border-radius: 25px;
            cursor: pointer;
        }

        .patient-list {
            margin-top: 20px;
            width: 100%;
            border-collapse: collapse;
        }

        .patient-list th,
        .patient-list td {
            background-color: #fff;
            padding: 12px;
            border: 1px solid #DDD;
            text-align: left;
        }

        .patient-list th {
            background-color: #f2f2f2;
            color: #333;
        }

        .patient-list td a {
            color: #008080;
            text-decoration: none;
        }

        .patient-list td a:hover {
            text-decoration: underline;
        }

        .action-btn {
            padding: 5px 10px;
            background-color: #008080;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .prescription-form {
            display: none;
            background-color: #D3D3D3;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: fixed;
            top: 10%;
            left: 25%;
            width: 50%;
            z-index: 1000;
        }

        .prescription-form h2 {
            color: #008080;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            color: #333;
        }

        .form-group input[type="text"],
        .form-group textarea {
            width: 100%;
            padding: 10px;
            border-radius: 4px;
            border: 1px solid #ccc;
        }

        .form-group textarea {
            resize: vertical;
        }

        .form-buttons {
            margin-top: 20px;
            display: flex;
            justify-content: space-between;
        }

        .form-buttons button {
            padding: 10px 20px;
            background-color: #008080;
            color: #fff;
            border: none;
            border-radius: 25px;
            cursor: pointer;
        }

        .form-buttons .delete-btn {
            background-color: #ff6347;
        }

        .close-btn {
            background-color: #ff6347;
            color: #fff;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            padding: 5px 10px;
            font-size: 18px;
            position: absolute;
            top: 10px;
            right: 10px;
        }

        .medication-list {
            margin-top: 10px;
        }

        .medication-item {
            margin-bottom: 10px;
        }
    </style>
</head>

<body>
    <!-- Existing floating header and sidebar -->
    <div class="floating-header">
        <h1>Doctor's Dashboard</h1>
    </div>

    <div class="sidebar">
        <ul>
            <li><a href="DoctorDash.htm">Dashboard</a></li>
            <li><a href="PatientRecords.htm">Profile</a></li>
            <li><a href="DoctorDash.htm">Onboarded</a></li>
            <li><a href="onboarding.htm">Onboarding</a></li>
            <li><a href="#">Log Out</a></li>
        </ul>
    </div>

    <div class="dashboard-container">
        <h1 style="text-align: center;">Onboarded Patients</h1>
        <div class="search-bar">
            <input type="text" id="patientSearch" placeholder="Search by Patient Code or ID">
            <button onclick="filterPatients()">Search</button>
        </div>
        <div id="patientListContainer">
            <table class="patient-list">
                <thead>
                    <tr>
\
                        <th>First Name</th>
                        <th>Second Name</th>


                    </tr>
                </thead>
                <tbody id="patientList">

                </tbody>
            </table>
        </div>

        <div id="prescriptionFormContainer" class="prescription-form">
            <button class="close-btn" onclick="closePrescriptionForm()">Ã—</button>
            <div id="commentSection">
                <h2>Add a Comment</h2>
                <form id="commentForm">
                    <div class="form-group">
                        <label for="comment">Enter Comment</label>
                        <textarea id="comment" rows="3" required></textarea>
                    </div>
                    <div class="form-buttons">
                        <button type="button" onclick="sendComment()">Send Comment</button>
                    </div>
                </form>
            </div>
            <div id="prescriptionSection" style="display: none;">
                <h2>Write a Prescription</h2>
                <form id="prescriptionForm">
                    <div id="medicationList" class="medication-list">
                        <div class="medication-item">
                            <div class="form-group">
                                <label for="medicationName1">Medication Name</label>
                                <input type="text" id="medicationName1" required>
                            </div>
                            <div class="form-group">
                                <label for="dosage1">Dosage</label>
                                <input type="text" id="dosage1" required>
                            </div>
                            <button type="button" onclick="sendMedication(1)">Send Prescription for This
                                Medication</button>
                        </div>
                    </div>
                    <button type="button" onclick="addMedication()">Add Another Medication</button>
                    <!--   <div class="form-buttons">
                    <button type="button" onclick="sendAllPrescriptions()">Send All Prescriptions</button>
                    <button type="button" class="delete-btn" onclick="deletePrescription()">Delete Prescription</button>
                    <button type="button" onclick="editPrescription()">Edit Prescription</button>
                    <button type="button" onclick="updatePrescription()">Update Prescription</button>
                </div>-->
                </form>
            </div>
        </div>

        <script>
            function filterPatients() {
                const authToken = localStorage.getItem('authToken'); // Retrieve the auth token from localStorage
                const patientCode = document.getElementById('patientSearch').value.trim(); // Get the search input

                if (!patientCode) {
                    alert('Please enter a Patient Code or ID to search.');
                    return;
                }

                // Construct the API endpoint with the patient code
                const endpoint = `https://hpms-0be27dd3c23f.herokuapp.com/api/v1/hos/${patientCode}/patient`;

                fetch(endpoint, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`, // Include the auth token in the header
                    }
                })
                    .then(response => {
                        console.log(`HTTP Status: ${response.status} - ${response.statusText}`); // Log HTTP status
                        if (response.ok) {
                            return response.json();
                        }
                        throw new Error('Failed to fetch patient data');
                    })
                    .then(data => {
                        console.log('Fetched Data Structure:', data);
                        const patient = data.success || data; // Adjust this line based on the actual structure

                        // Log the patient data to inspect its structure
                        console.log('Patient Data:', patient);

                        // If the structure is not as expected, access the properties differently
                        const patientList = document.getElementById('patientList');
                        patientList.innerHTML = ''; // Clear any existing rows

                        // Check if patient object has the necessary fields
                        const id = patient.id || 'N/A';
                        const firstName = patient.first_name || 'N/A';
                        const secondName = patient.second_name || 'N/A';
                        const patientCode = patient.patient_code || 'N/A';
                        const email = patient.email || 'N/A';
                        const phoneNumber = patient.phone_number || 'N/A';
                        const dob = patient.DOB || 'N/A';
                        const location = patient.location || 'N/A';

                        // Create a row for the fetched patient
                        const row = document.createElement('tr');
                        row.innerHTML = `
                <td>1</td>
                <!-- <td>${id}</td> -->
                <td>${firstName}</td>
                <td>${secondName}</td>
                                 
                <!--  <td>${patientCode}</td> -->
                <!--  <td>${email}</td>-->
                 <!-- <td>${phoneNumber}</td>-->
                <!--  <td>${dob}</td> -->
                 <!-- <td>${location}</td> -->

                 
                <td><button class="action-btn" onclick="goToPrescriptionPage('${patientCode}')">Write Prescription</button></td>
                
            
            `; console.log('Patient Code:', patientCode);

                        patientList.appendChild(row);
                    })
                    .catch(error => {
                        console.error('Error:', error); // Log any errors//
                        alert('Failed to load patient: ' + error.message);
                    });
            }

            function goToPrescriptionPage(patientCode) {
                // Navigate to the prescription page for the selected patient
                window.location.href = `http://127.0.0.1:5501/Medicine_Dispense_System/PrescriptionForm.htm?patient_code=${patientCode}`;
            }


     

            function closePrescriptionForm() {
                document.getElementById('prescriptionFormContainer').style.display = 'none';
                document.getElementById('commentSection').style.display = 'block';
                document.getElementById('prescriptionSection').style.display = 'none';
                document.getElementById('comment').value = '';
                document.getElementById('medicationList').innerHTML = `
                <div class="medication-item">
                    <div class="form-group">
                        <label for="medicationName1">Medication Name</label>
                        <input type="text" id="medicationName1" required>
                    </div>
                    <div class="form-group">
                        <label for="dosage1">Dosage</label>
                        <input type="text" id="dosage1" required>
                    </div>
                    <button type="button" onclick="sendMedication(1)">Send Prescription for This Medication</button>
                </div>
            `;
                medicationIndex = 1;
            }
function sendComment(patientCode) {
    const comment = document.getElementById('comment').value;

    console.log('Sending comment:', comment, 'For patient ID:', patientId, 'patientCode:', patientCode);

    // Step 1: Create the prescription
    fetch(`https://hpms-0be27dd3c23f.herokuapp.com/hospital/${patientId}/prescription`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}` // Include the auth token in the header
        },
        body: JSON.stringify({
            patient_code: patientId
        })
    })
    .then(response => {
        if (response.ok) {
            return response.json(); // Parse the JSON response to get the prescription_id
        }
        throw new Error('Failed to create prescription');
    })
    .then(data => {
        const prescription_id = data.prescription_id; // Extract prescription_id from the response
        console.log('Prescription ID:', prescription_id);

        // Step 2: Send the comment
        return fetch(`https://hpms-0be27dd3c23f.herokuapp.com/prescription/med/${prescription_id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('authToken')}` // Include the auth token in the header
            },
            body: JSON.stringify({
                comment: comment
            })
        });
    })
    .then(response => {
        if (response.ok) {
            return response.json(); // Parse the JSON response to check success
        }
        throw new Error('Failed to send comment');
    })
    .then(data => {
        if (data.success) {
            console.log('Comment sent successfully:', data);
            alert('Comment sent successfully!');
        } else {
            console.error('Error sending comment:', data);
            alert('Failed to send comment. Please try again.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while sending the comment.');
    });

    // Hide comment section and show prescription section
    document.getElementById('commentSection').style.display = 'none';
    document.getElementById('prescriptionSection').style.display = 'block';
}


          function sendMedication(index) {
                const medicationName = document.getElementById(`medicationName${index}`).value;
                const dosage = document.getElementById(`dosage${index}`).value;

                fetch(`https://hpms-0be27dd3c23f.herokuapp.com/prescription/med/${prescriptionId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}` // Include the auth token in the header
                    },
                    body: JSON.stringify({
                        medication_name: medicationName,
                        dosage: dosage,
                        prescription_id: prescriptionId // Make sure to use the correct prescription ID
                    })
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json(); // Parse the JSON response
                        }
                        throw new Error('Failed to send medication');
                    })
                    .then(data => {
                        if (data.success) {
                            console.log('Medication sent successfully:', data);
                            alert('Medication sent successfully!');
                        } else {
                            console.error('Error sending medication:', data);
                            alert('Failed to send medication. Please try again.');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while sending the medication.');
                    });
            }

            function sendAllPrescriptions() {
                const medications = [];
                for (let i = 1; i <= medicationIndex; i++) {
                    const medicationName = document.getElementById(`medicationName${i}`).value;
                    const dosage = document.getElementById(`dosage${i}`).value;
                    if (medicationName && dosage) {
                        medications.push({ medicationName, dosage });
                    }
                }
                if (medications.length > 0) {
                    console.log('Sending all prescriptions:', medications, 'For patient ID:', patientId);
                    alert('All prescriptions sent successfully!');
                    // Add code here to actually send all prescriptions (e.g., via an API call)
                } else {
                    alert('No valid prescriptions to send.');
                }
            }

            function deletePrescription() {
                console.log('Deleting prescription for patient ID:', patientId);
                alert('Prescription deleted successfully!');
                // Add code here to actually delete the prescription (e.g., via an API call)
            }

            function editPrescription() {
                console.log('Editing prescription for patient ID:', patientId);
                alert('Prescription edited successfully!');
                // Add code here to actually edit the prescription (e.g., via an API call)
            }

            function updatePrescription() {
                console.log('Updating prescription for patient ID:', patientId);
                alert('Prescription updated successfully!');
                // Add code here to actually update the prescription (e.g., via an API call)
            }
        </script>
</body>

</html>